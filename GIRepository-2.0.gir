<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.1"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <package name="gobject-introspection-1.0"/>
  <c:include name="girepository.h"/>
  <namespace name="GIRepository"
             version="2.0"
             shared-library="libgirepository-1.0.so.1"
             c:prefix="g">
    <alias name="IArgInfo" target="IBaseInfo" c:type="GIArgInfo"/>
    <alias name="ICallableInfo" target="IBaseInfo" c:type="GICallableInfo"/>
    <alias name="ICallbackInfo" target="IBaseInfo" c:type="GICallbackInfo"/>
    <alias name="IConstantInfo" target="IBaseInfo" c:type="GIConstantInfo"/>
    <alias name="IEnumInfo" target="IBaseInfo" c:type="GIEnumInfo"/>
    <alias name="IErrorDomainInfo"
           target="IBaseInfo"
           c:type="GIErrorDomainInfo"/>
    <alias name="IFieldInfo" target="IBaseInfo" c:type="GIFieldInfo"/>
    <alias name="IFunctionInfo" target="IBaseInfo" c:type="GIFunctionInfo"/>
    <alias name="IInterfaceInfo" target="IBaseInfo" c:type="GIInterfaceInfo"/>
    <alias name="IObjectInfo" target="IBaseInfo" c:type="GIObjectInfo"/>
    <alias name="IPropertyInfo" target="IBaseInfo" c:type="GIPropertyInfo"/>
    <alias name="IRegisteredTypeInfo"
           target="IBaseInfo"
           c:type="GIRegisteredTypeInfo"/>
    <alias name="ISignalInfo" target="IBaseInfo" c:type="GISignalInfo"/>
    <alias name="IStructInfo" target="IBaseInfo" c:type="GIStructInfo"/>
    <alias name="ITypeInfo" target="IBaseInfo" c:type="GITypeInfo"/>
    <alias name="IUnionInfo" target="IBaseInfo" c:type="GIUnionInfo"/>
    <alias name="IVFuncInfo" target="IBaseInfo" c:type="GIVFuncInfo"/>
    <alias name="IValueInfo" target="IBaseInfo" c:type="GIValueInfo"/>
    <union name="Argument" c:type="GArgument">
      <field name="v_boolean" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="v_int8" writable="1">
        <type name="int8" c:type="gint8"/>
      </field>
      <field name="v_uint8" writable="1">
        <type name="uint8" c:type="guint8"/>
      </field>
      <field name="v_int16" writable="1">
        <type name="int16" c:type="gint16"/>
      </field>
      <field name="v_uint16" writable="1">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="v_int32" writable="1">
        <type name="int32" c:type="gint32"/>
      </field>
      <field name="v_uint32" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="v_int64" writable="1">
        <type name="int64" c:type="gint64"/>
      </field>
      <field name="v_uint64" writable="1">
        <type name="uint64" c:type="guint64"/>
      </field>
      <field name="v_float" writable="1">
        <type name="float" c:type="gfloat"/>
      </field>
      <field name="v_double" writable="1">
        <type name="double" c:type="gdouble"/>
      </field>
      <field name="v_short" writable="1">
        <type name="short" c:type="gshort"/>
      </field>
      <field name="v_ushort" writable="1">
        <type name="ushort" c:type="gushort"/>
      </field>
      <field name="v_int" writable="1">
        <type name="int" c:type="gint"/>
      </field>
      <field name="v_uint" writable="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="v_long" writable="1">
        <type name="long" c:type="glong"/>
      </field>
      <field name="v_ulong" writable="1">
        <type name="ulong" c:type="gulong"/>
      </field>
      <field name="v_ssize" writable="1">
        <type name="gssize" c:type="gssize"/>
      </field>
      <field name="v_size" writable="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="v_string" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="v_pointer" writable="1">
        <type name="any" c:type="gpointer"/>
      </field>
    </union>
    <constant name="GI_TYPE_TAG_N_TYPES" value="1">
      <type name="int"/>
    </constant>
    <enumeration name="IArrayType" c:type="GIArrayType">
      <doc xml:whitespace="preserve">The type of array in a #GITypeInfo.</doc>
      <member name="c" value="0" c:identifier="GI_ARRAY_TYPE_C"/>
      <member name="array" value="1" c:identifier="GI_ARRAY_TYPE_ARRAY"/>
      <member name="ptr_array"
              value="2"
              c:identifier="GI_ARRAY_TYPE_PTR_ARRAY"/>
      <member name="byte_array"
              value="3"
              c:identifier="GI_ARRAY_TYPE_BYTE_ARRAY"/>
    </enumeration>
    <record name="IAttributeIter" c:type="GIAttributeIter">
      <doc xml:whitespace="preserve">An opaque structure used to iterate over attributes
in a #GIBaseInfo struct.</doc>
      <field name="data" writable="1">
        <type name="any" c:type="gpointer"/>
      </field>
      <field name="data2" writable="1">
        <type name="any" c:type="gpointer"/>
      </field>
      <field name="data3" writable="1">
        <type name="any" c:type="gpointer"/>
      </field>
      <field name="data4" writable="1">
        <type name="any" c:type="gpointer"/>
      </field>
    </record>
    <record name="IBaseInfo" c:type="GIBaseInfo">
    </record>
    <record name="IBaseInfoStub" c:type="_GIBaseInfoStub">
      <field name="dummy1" writable="1">
        <type name="int32" c:type="gint32"/>
      </field>
      <field name="dummy2" writable="1">
        <type name="int32" c:type="gint32"/>
      </field>
      <field name="dummy3" writable="1">
        <type name="any" c:type="gpointer"/>
      </field>
      <field name="dummy4" writable="1">
        <type name="any" c:type="gpointer"/>
      </field>
      <field name="dummy5" writable="1">
        <type name="any" c:type="gpointer"/>
      </field>
      <field name="dummy6" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="dummy7" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="padding" writable="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="4">
          <type name="any"/>
        </array>
      </field>
    </record>
    <enumeration name="IDirection" c:type="GIDirection">
      <doc xml:whitespace="preserve">The direction of a #GIArgInfo.</doc>
      <member name="in" value="0" c:identifier="GI_DIRECTION_IN"/>
      <member name="out" value="1" c:identifier="GI_DIRECTION_OUT"/>
      <member name="inout" value="2" c:identifier="GI_DIRECTION_INOUT"/>
    </enumeration>
    <bitfield name="IFieldInfoFlags" c:type="GIFieldInfoFlags">
      <doc xml:whitespace="preserve">Flags for a #GIFieldInfo.</doc>
      <member name="readable" value="1" c:identifier="GI_FIELD_IS_READABLE"/>
      <member name="writable" value="2" c:identifier="GI_FIELD_IS_WRITABLE"/>
    </bitfield>
    <bitfield name="IFunctionInfoFlags" c:type="GIFunctionInfoFlags">
      <doc xml:whitespace="preserve">Flags for a #GIFunctionInfo struct.</doc>
      <member name="is_method" value="1" c:identifier="GI_FUNCTION_IS_METHOD"/>
      <member name="is_constructor"
              value="2"
              c:identifier="GI_FUNCTION_IS_CONSTRUCTOR"/>
      <member name="is_getter" value="4" c:identifier="GI_FUNCTION_IS_GETTER"/>
      <member name="is_setter" value="8" c:identifier="GI_FUNCTION_IS_SETTER"/>
      <member name="wraps_vfunc"
              value="16"
              c:identifier="GI_FUNCTION_WRAPS_VFUNC"/>
      <member name="throws" value="32" c:identifier="GI_FUNCTION_THROWS"/>
    </bitfield>
    <enumeration name="IInfoType" c:type="GIInfoType">
      <doc xml:whitespace="preserve">The type of a GIBaseInfo struct.</doc>
      <member name="invalid" value="0" c:identifier="GI_INFO_TYPE_INVALID"/>
      <member name="function" value="1" c:identifier="GI_INFO_TYPE_FUNCTION"/>
      <member name="callback" value="2" c:identifier="GI_INFO_TYPE_CALLBACK"/>
      <member name="struct" value="3" c:identifier="GI_INFO_TYPE_STRUCT"/>
      <member name="boxed" value="4" c:identifier="GI_INFO_TYPE_BOXED"/>
      <member name="enum" value="5" c:identifier="GI_INFO_TYPE_ENUM"/>
      <member name="flags" value="6" c:identifier="GI_INFO_TYPE_FLAGS"/>
      <member name="object" value="7" c:identifier="GI_INFO_TYPE_OBJECT"/>
      <member name="interface"
              value="8"
              c:identifier="GI_INFO_TYPE_INTERFACE"/>
      <member name="constant" value="9" c:identifier="GI_INFO_TYPE_CONSTANT"/>
      <member name="error_domain"
              value="10"
              c:identifier="GI_INFO_TYPE_ERROR_DOMAIN"/>
      <member name="union" value="11" c:identifier="GI_INFO_TYPE_UNION"/>
      <member name="value" value="12" c:identifier="GI_INFO_TYPE_VALUE"/>
      <member name="signal" value="13" c:identifier="GI_INFO_TYPE_SIGNAL"/>
      <member name="vfunc" value="14" c:identifier="GI_INFO_TYPE_VFUNC"/>
      <member name="property" value="15" c:identifier="GI_INFO_TYPE_PROPERTY"/>
      <member name="field" value="16" c:identifier="GI_INFO_TYPE_FIELD"/>
      <member name="arg" value="17" c:identifier="GI_INFO_TYPE_ARG"/>
      <member name="type" value="18" c:identifier="GI_INFO_TYPE_TYPE"/>
      <member name="unresolved"
              value="19"
              c:identifier="GI_INFO_TYPE_UNRESOLVED"/>
    </enumeration>
    <constant name="INVALID_REFCOUNT" value="2147483647">
      <type name="int"/>
    </constant>
    <callback name="IObjectInfoGetValueFunction"
              c:type="GIObjectInfoGetValueFunction">
      <doc xml:whitespace="preserve">Extract an object instance out of @value</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the object instance</doc>
        <type name="any" c:type="void*"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GValue</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="IObjectInfoRefFunction" c:type="GIObjectInfoRefFunction">
      <doc xml:whitespace="preserve">Increases the reference count of an object instance.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the object instance</doc>
        <type name="any" c:type="void*"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:whitespace="preserve">object instance pointer</doc>
          <type name="any" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="IObjectInfoSetValueFunction"
              c:type="GIObjectInfoSetValueFunction">
      <doc xml:whitespace="preserve">Update @value and attach the object instance pointer @object to it.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GValue</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="object" transfer-ownership="none">
          <doc xml:whitespace="preserve">object instance pointer</doc>
          <type name="any" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="IObjectInfoUnrefFunction"
              c:type="GIObjectInfoUnrefFunction">
      <doc xml:whitespace="preserve">Decreases the reference count of an object instance.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:whitespace="preserve">object instance pointer</doc>
          <type name="any" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="IRepository"
           c:type="GIRepository"
           parent="GObject.Object"
           glib:type-name="GIRepository"
           glib:get-type="g_irepository_get_type"
           glib:type-struct="IRepositoryClass">
      <function name="get_default" c:identifier="g_irepository_get_default">
        <doc xml:whitespace="preserve">Returns the singleton process-global default #GIRepository.  It is
not currently supported to have multiple repositories in a
particular process, but this function is provided in the unlikely
eventuality that it would become possible, and as a convenience for
higher level language bindings to conform to the GObject method
call conventions.
All methods on #GIRepository also accept %NULL as an instance
parameter to mean this default repository, which is usually more
convenient for C.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The global singleton #GIRepository</doc>
          <type name="IRepository" c:type="GIRepository*"/>
        </return-value>
      </function>
      <function name="prepend_search_path"
                c:identifier="g_irepository_prepend_search_path">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="directory" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_search_path"
                c:identifier="g_irepository_get_search_path">
        <doc xml:whitespace="preserve">Returns the search path the GIRepository will use when looking for typelibs.
The string is internal to GIRespository and should not be freed, nor should
the elements.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">list of strings</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="filename"/>
          </type>
        </return-value>
      </function>
      <function name="get_option_group"
                c:identifier="g_irepository_get_option_group">
        <return-value transfer-ownership="full">
          <type name="GLib.OptionGroup" c:type="GOptionGroup*"/>
        </return-value>
      </function>
      <function name="dump" c:identifier="g_irepository_dump" throws="1">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="arg" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <method name="load_typelib"
              c:identifier="g_irepository_load_typelib"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="typelib" transfer-ownership="none">
            <type name="Typelib" c:type="GTypelib*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="IRepositoryLoadFlags" c:type="GIRepositoryLoadFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_registered" c:identifier="g_irepository_is_registered">
        <doc xml:whitespace="preserve">Check whether a particular namespace (and optionally, a specific
version thereof) is currently loaded.  This function is likely to
only be useful in unusual circumstances; in order to act upon
metadata in the namespace, you should call #g_irepository_require
instead which will ensure the namespace is loaded, and return as
quickly as this function will if it has already been loaded.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if namespace-version is loaded, %FALSE otherwise</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="namespace_" transfer-ownership="none">
            <doc xml:whitespace="preserve">Namespace of interest</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="version" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Required version, may be %NULL for latest</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_by_name" c:identifier="g_irepository_find_by_name">
        <doc xml:whitespace="preserve">Searches for a particular entry in a namespace.  Before calling
this function for a particular namespace, you must call
#g_irepository_require once to load the namespace, or otherwise
ensure the namespace has already been loaded.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">#GIBaseInfo representing metadata about @name, or %NULL</doc>
          <type name="IBaseInfo" c:type="GIBaseInfo*"/>
        </return-value>
        <parameters>
          <parameter name="namespace_" transfer-ownership="none">
            <doc xml:whitespace="preserve">Namespace which will be searched</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Entry name to find</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="enumerate_versions"
              c:identifier="g_irepository_enumerate_versions">
        <doc xml:whitespace="preserve">Obtain an unordered list of versions (either currently loaded or
available) for @namespace_ in this @repository.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the array of versions.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="namespace_" transfer-ownership="none">
            <doc xml:whitespace="preserve">GI namespace, e.g. "Gtk"</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="require" c:identifier="g_irepository_require" throws="1">
        <doc xml:whitespace="preserve">Force the namespace @namespace_ to be loaded if it isn't already.
If @namespace_ is not loaded, this function will search for a
".typelib" file using the repository search path.  In addition, a
version @version of namespace may be specified.  If @version is
not specified, the latest will be used.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a pointer to the #GTypelib if successful, %NULL otherwise</doc>
          <type name="Typelib" c:type="GTypelib*"/>
        </return-value>
        <parameters>
          <parameter name="namespace_" transfer-ownership="none">
            <doc xml:whitespace="preserve">GI namespace to use, e.g. "Gtk"</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="version" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Version of namespace, may be %NULL for latest</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">Set of %GIRepositoryLoadFlags, may be 0</doc>
            <type name="IRepositoryLoadFlags" c:type="GIRepositoryLoadFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="require_private"
              c:identifier="g_irepository_require_private"
              throws="1">
        <doc xml:whitespace="preserve">Force the namespace @namespace_ to be loaded if it isn't already.
If @namespace_ is not loaded, this function will search for a
".typelib" file within the private directory only. In addition, a
version @version of namespace should be specified.  If @version is
not specified, the latest will be used.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a pointer to the #GTypelib if successful, %NULL otherwise</doc>
          <type name="Typelib" c:type="GTypelib*"/>
        </return-value>
        <parameters>
          <parameter name="typelib_dir" transfer-ownership="none">
            <doc xml:whitespace="preserve">Private directory where to find the requested typelib</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="namespace" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="version" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Version of namespace, may be %NULL for latest</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">Set of %GIRepositoryLoadFlags, may be 0</doc>
            <type name="IRepositoryLoadFlags" c:type="GIRepositoryLoadFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_dependencies"
              c:identifier="g_irepository_get_dependencies">
        <doc xml:whitespace="preserve">Return an array of all (transitive) dependencies for namespace
form &lt;code&gt;namespace-version&lt;/code&gt;.
such as #g_irepository_require before calling this function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">Zero-terminated string array of versioned dependencies</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="namespace_" transfer-ownership="none">
            <doc xml:whitespace="preserve">Namespace of interest</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_loaded_namespaces"
              c:identifier="g_irepository_get_loaded_namespaces">
        <return-value transfer-ownership="full">
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
      </method>
      <method name="find_by_gtype" c:identifier="g_irepository_find_by_gtype">
        <doc xml:whitespace="preserve">Searches all loaded namespaces for a particular #GType.  Note that
in order to locate the metadata, the namespace corresponding to
the type must first have been loaded.  There is currently no
mechanism for determining the namespace which corresponds to an
arbitrary GType - thus, this function will operate most reliably
when you know the GType to originate from be from a loaded namespace.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">#GIBaseInfo representing metadata about @type, or %NULL</doc>
          <type name="IBaseInfo" c:type="GIBaseInfo*"/>
        </return-value>
        <parameters>
          <parameter name="gtype" transfer-ownership="none">
            <doc xml:whitespace="preserve">GType to search for</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_n_infos" c:identifier="g_irepository_get_n_infos">
        <doc xml:whitespace="preserve">This function returns the number of metadata entries in
given namespace @namespace_.  The namespace must have
already been loaded before calling this function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">number of metadata entries</doc>
          <type name="int" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="namespace_" transfer-ownership="none">
            <doc xml:whitespace="preserve">Namespace to inspect</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_info" c:identifier="g_irepository_get_info">
        <doc xml:whitespace="preserve">This function returns a particular metadata entry in the
given namespace @namespace_.  The namespace must have
already been loaded before calling this function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">#GIBaseInfo containing metadata</doc>
          <type name="IBaseInfo" c:type="GIBaseInfo*"/>
        </return-value>
        <parameters>
          <parameter name="namespace_" transfer-ownership="none">
            <doc xml:whitespace="preserve">Namespace to inspect</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">Offset into namespace metadata for entry</doc>
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_typelib_path"
              c:identifier="g_irepository_get_typelib_path">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="namespace_" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_shared_library"
              c:identifier="g_irepository_get_shared_library">
        <doc xml:whitespace="preserve">This function returns the full path to the shared C library
associated with the given namespace @namespace_. There may be no
shared library path associated, in which case this function will
return %NULL.
such as #g_irepository_require before calling this function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Full path to shared library, or %NULL if none associated</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="namespace_" transfer-ownership="none">
            <doc xml:whitespace="preserve">Namespace to inspect</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_c_prefix" c:identifier="g_irepository_get_c_prefix">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="namespace_" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_version" c:identifier="g_irepository_get_version">
        <doc xml:whitespace="preserve">This function returns the loaded version associated with the given
namespace @namespace_.
such as #g_irepository_require before calling this function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Loaded version</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="namespace_" transfer-ownership="none">
            <doc xml:whitespace="preserve">Namespace to inspect</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="IRepositoryPrivate" c:type="GIRepositoryPrivate*"/>
      </field>
    </class>
    <record name="IRepositoryClass"
            c:type="GIRepositoryClass"
            glib:is-gtype-struct-for="IRepository">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="IRepositoryError" c:type="GIRepositoryError">
      <member name="typelib_not_found"
              value="0"
              c:identifier="G_IREPOSITORY_ERROR_TYPELIB_NOT_FOUND"/>
      <member name="namespace_mismatch"
              value="1"
              c:identifier="G_IREPOSITORY_ERROR_NAMESPACE_MISMATCH"/>
      <member name="namespace_version_conflict"
              value="2"
              c:identifier="G_IREPOSITORY_ERROR_NAMESPACE_VERSION_CONFLICT"/>
      <member name="library_not_found"
              value="3"
              c:identifier="G_IREPOSITORY_ERROR_LIBRARY_NOT_FOUND"/>
    </enumeration>
    <bitfield name="IRepositoryLoadFlags" c:type="GIRepositoryLoadFlags">
      <member name="irepository_load_flag_lazy"
              value="1"
              c:identifier="G_IREPOSITORY_LOAD_FLAG_LAZY"/>
    </bitfield>
    <record name="IRepositoryPrivate" c:type="GIRepositoryPrivate">
    </record>
    <enumeration name="IScopeType" c:type="GIScopeType">
      <doc xml:whitespace="preserve">Scope type of a #GIArgInfo representing callback, determines how the
callback is invoked and is used to decided when the invoke structs
can be freed.</doc>
      <member name="invalid" value="0" c:identifier="GI_SCOPE_TYPE_INVALID"/>
      <member name="call" value="1" c:identifier="GI_SCOPE_TYPE_CALL"/>
      <member name="async" value="2" c:identifier="GI_SCOPE_TYPE_ASYNC"/>
      <member name="notified" value="3" c:identifier="GI_SCOPE_TYPE_NOTIFIED"/>
    </enumeration>
    <enumeration name="ITransfer" c:type="GITransfer">
      <doc xml:whitespace="preserve">The transfer is the exchange of data between two parts, from the callee to
the caller. The callee is either a function/method/signal or an
object/interface where a property is defined. The caller is the side
accessing a property or calling a function.
#GITransfer specifies who's responsible for freeing the resources after the
ownership transfer is complete. In case of a containing type such as a list,
an array or a hash table the container itself is specified differently from
the items within the container itself. Each container is freed differently,
check the documentation for the types themselves for information on how to
free them.</doc>
      <member name="nothing" value="0" c:identifier="GI_TRANSFER_NOTHING"/>
      <member name="container" value="1" c:identifier="GI_TRANSFER_CONTAINER"/>
      <member name="everything"
              value="2"
              c:identifier="GI_TRANSFER_EVERYTHING"/>
    </enumeration>
    <enumeration name="ITypeTag" c:type="GITypeTag">
      <doc xml:whitespace="preserve">The type tag of a #GITypeInfo.</doc>
      <member name="void" value="0" c:identifier="GI_TYPE_TAG_VOID"/>
      <member name="boolean" value="1" c:identifier="GI_TYPE_TAG_BOOLEAN"/>
      <member name="int8" value="2" c:identifier="GI_TYPE_TAG_INT8"/>
      <member name="uint8" value="3" c:identifier="GI_TYPE_TAG_UINT8"/>
      <member name="int16" value="4" c:identifier="GI_TYPE_TAG_INT16"/>
      <member name="uint16" value="5" c:identifier="GI_TYPE_TAG_UINT16"/>
      <member name="int32" value="6" c:identifier="GI_TYPE_TAG_INT32"/>
      <member name="uint32" value="7" c:identifier="GI_TYPE_TAG_UINT32"/>
      <member name="int64" value="8" c:identifier="GI_TYPE_TAG_INT64"/>
      <member name="uint64" value="9" c:identifier="GI_TYPE_TAG_UINT64"/>
      <member name="float" value="10" c:identifier="GI_TYPE_TAG_FLOAT"/>
      <member name="double" value="11" c:identifier="GI_TYPE_TAG_DOUBLE"/>
      <member name="gtype" value="12" c:identifier="GI_TYPE_TAG_GTYPE"/>
      <member name="utf8" value="13" c:identifier="GI_TYPE_TAG_UTF8"/>
      <member name="filename" value="14" c:identifier="GI_TYPE_TAG_FILENAME"/>
      <member name="array" value="15" c:identifier="GI_TYPE_TAG_ARRAY"/>
      <member name="interface"
              value="16"
              c:identifier="GI_TYPE_TAG_INTERFACE"/>
      <member name="glist" value="17" c:identifier="GI_TYPE_TAG_GLIST"/>
      <member name="gslist" value="18" c:identifier="GI_TYPE_TAG_GSLIST"/>
      <member name="ghash" value="19" c:identifier="GI_TYPE_TAG_GHASH"/>
      <member name="error" value="20" c:identifier="GI_TYPE_TAG_ERROR"/>
    </enumeration>
    <record name="IUnresolvedInfo" c:type="GIUnresolvedInfo">
      <doc xml:whitespace="preserve">Represents a unresolved type in a typelib.</doc>
    </record>
    <bitfield name="IVFuncInfoFlags" c:type="GIVFuncInfoFlags">
      <doc xml:whitespace="preserve">Flags of a #GIVFuncInfo struct.</doc>
      <member name="chain_up" value="1" c:identifier="GI_VFUNC_MUST_CHAIN_UP"/>
      <member name="override" value="2" c:identifier="GI_VFUNC_MUST_OVERRIDE"/>
      <member name="not_override"
              value="4"
              c:identifier="GI_VFUNC_MUST_NOT_OVERRIDE"/>
    </bitfield>
    <enumeration name="InvokeError"
                 c:type="GInvokeError"
                 glib:error-quark="g_invoke_error_quark">
      <doc xml:whitespace="preserve">An error occuring while invoking a function via
g_function_info_invoke().</doc>
      <member name="failed" value="0" c:identifier="G_INVOKE_ERROR_FAILED"/>
      <member name="symbol_not_found"
              value="1"
              c:identifier="G_INVOKE_ERROR_SYMBOL_NOT_FOUND"/>
      <member name="argument_mismatch"
              value="2"
              c:identifier="G_INVOKE_ERROR_ARGUMENT_MISMATCH"/>
    </enumeration>
    <record name="Typelib" c:type="GTypelib">
      <constructor name="new_from_memory"
                   c:identifier="g_typelib_new_from_memory"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="Typelib" c:type="GTypelib*"/>
        </return-value>
        <parameters>
          <parameter name="memory" transfer-ownership="none">
            <array c:type="guint8*">
              <type name="uint8"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_const_memory"
                   c:identifier="g_typelib_new_from_const_memory"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="Typelib" c:type="GTypelib*"/>
        </return-value>
        <parameters>
          <parameter name="memory" transfer-ownership="none">
            <array c:type="guint8*">
              <type name="uint8"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_mapped_file"
                   c:identifier="g_typelib_new_from_mapped_file"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="Typelib" c:type="GTypelib*"/>
        </return-value>
        <parameters>
          <parameter name="mfile" transfer-ownership="none">
            <type name="GLib.MappedFile" c:type="GMappedFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="free" c:identifier="g_typelib_free">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="symbol" c:identifier="g_typelib_symbol">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="symbol_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="symbol" transfer-ownership="none">
            <type name="any" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_namespace" c:identifier="g_typelib_get_namespace">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
    </record>
    <function name="arg_info_get_closure"
              c:identifier="g_arg_info_get_closure">
      <doc xml:whitespace="preserve">Obtain the index of the user data argument. This is only valid
for arguments which are callbacks.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">index of the user data argument or -1 if there is none</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIArgInfo</doc>
          <type name="IArgInfo" c:type="GIArgInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="arg_info_get_destroy"
              c:identifier="g_arg_info_get_destroy">
      <doc xml:whitespace="preserve">Obtains the index of the #GDestroyNotify argument. This is only valid
for arguments which are callbacks.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">index of the #GDestroyNotify argument or -1 if there is none</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIArgInfo</doc>
          <type name="IArgInfo" c:type="GIArgInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="arg_info_get_direction"
              c:identifier="g_arg_info_get_direction">
      <doc xml:whitespace="preserve">Obtain the direction of the argument. Check #GIDirection for possible
direction values.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the direction</doc>
        <type name="IDirection" c:type="GIDirection"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIArgInfo</doc>
          <type name="IArgInfo" c:type="GIArgInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="arg_info_get_ownership_transfer"
              c:identifier="g_arg_info_get_ownership_transfer">
      <doc xml:whitespace="preserve">Obtain the ownership transfer for this argument.
#GITransfer contains a list of possible values.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the transfer</doc>
        <type name="ITransfer" c:type="GITransfer"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIArgInfo</doc>
          <type name="IArgInfo" c:type="GIArgInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="arg_info_get_scope" c:identifier="g_arg_info_get_scope">
      <doc xml:whitespace="preserve">Obtain the scope type for this argument. The scope type explains
how a callback is going to be invoked, most importantly when
the resources required to invoke it can be freed.
#GIScopeType contains a list of possible values.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the scope type</doc>
        <type name="IScopeType" c:type="GIScopeType"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIArgInfo</doc>
          <type name="IArgInfo" c:type="GIArgInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="arg_info_get_type" c:identifier="g_arg_info_get_type">
      <doc xml:whitespace="preserve">Obtain the type information for @info.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GIArgInfo, free it with</doc>
        <type name="ITypeInfo" c:type="GITypeInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIArgInfo</doc>
          <type name="IArgInfo" c:type="GIArgInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="arg_info_is_caller_allocates"
              c:identifier="g_arg_info_is_caller_allocates">
      <doc xml:whitespace="preserve">Obtain if the argument is a pointer to a struct or object that will
receive an output of a function.  The default assumption for
%GI_DIRECTION_OUT arguments which have allocation is that the
callee allocates; if this is %TRUE, then the caller must allocate.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if caller is required to have allocated the argument</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIArgInfo</doc>
          <type name="IArgInfo" c:type="GIArgInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="arg_info_is_optional"
              c:identifier="g_arg_info_is_optional">
      <doc xml:whitespace="preserve">Obtain if the argument is optional.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if it is an optional argument</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIArgInfo</doc>
          <type name="IArgInfo" c:type="GIArgInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="arg_info_is_return_value"
              c:identifier="g_arg_info_is_return_value">
      <doc xml:whitespace="preserve">Obtain if the argument is a return value. It can either be a
parameter or a return value.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if it is a return value</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIArgInfo</doc>
          <type name="IArgInfo" c:type="GIArgInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="arg_info_load_type" c:identifier="g_arg_info_load_type">
      <doc xml:whitespace="preserve">Obtain information about a the type of given argument @info; this
function is a variant of g_arg_info_get_type() designed for stack
allocation.
The initialized @type must not be referenced after @info is deallocated.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIArgInfo</doc>
          <type name="IArgInfo" c:type="GIArgInfo*"/>
        </parameter>
        <parameter name="type"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:whitespace="preserve">Initialized with information about type of @info</doc>
          <type name="ITypeInfo" c:type="GITypeInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="arg_info_may_be_null"
              c:identifier="g_arg_info_may_be_null">
      <doc xml:whitespace="preserve">Obtain if the argument accepts %NULL.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if it accepts %NULL</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIArgInfo</doc>
          <type name="IArgInfo" c:type="GIArgInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="base_info_equal" c:identifier="g_base_info_equal">
      <doc xml:whitespace="preserve">Compare two #GIBaseInfo.
Using pointer comparison is not practical since many functions return
different instances of #GIBaseInfo that refers to the same part of the
TypeLib; use this function instead to do #GIBaseInfo comparisons.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if and only if @info1 equals @info2.</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info1" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIBaseInfo</doc>
          <type name="IBaseInfo" c:type="GIBaseInfo*"/>
        </parameter>
        <parameter name="info2" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIBaseInfo</doc>
          <type name="IBaseInfo" c:type="GIBaseInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="base_info_get_attribute"
              c:identifier="g_base_info_get_attribute">
      <doc xml:whitespace="preserve">Retrieve an arbitrary attribute associated with this node.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">The value of the attribute, or %NULL if no such attribute exists</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIBaseInfo</doc>
          <type name="IBaseInfo" c:type="GIBaseInfo*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:whitespace="preserve">a freeform string naming an attribute</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="base_info_get_container"
              c:identifier="g_base_info_get_container">
      <doc xml:whitespace="preserve">Obtain the container of the @info. The container is the parent
GIBaseInfo. For instance, the parent of a #GIFunctionInfo is an
#GIObjectInfo or #GIInterfaceInfo.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the container</doc>
        <type name="IBaseInfo" c:type="GIBaseInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIBaseInfo</doc>
          <type name="IBaseInfo" c:type="GIBaseInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="base_info_get_name" c:identifier="g_base_info_get_name">
      <doc xml:whitespace="preserve">Obtain the name of the @info. What the name represents depends on
the #GIInfoType of the @info. For instance for #GIFunctionInfo it is
the name of the function.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the name of @info or %NULL if it lacks a name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIBaseInfo</doc>
          <type name="IBaseInfo" c:type="GIBaseInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="base_info_get_namespace"
              c:identifier="g_base_info_get_namespace">
      <doc xml:whitespace="preserve">Obtain the namespace of @info.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the namespace</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIBaseInfo</doc>
          <type name="IBaseInfo" c:type="GIBaseInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="base_info_get_type" c:identifier="g_base_info_get_type">
      <doc xml:whitespace="preserve">Obtain the info type of the GIBaseInfo.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the info type of @info</doc>
        <type name="IInfoType" c:type="GIInfoType"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIBaseInfo</doc>
          <type name="IBaseInfo" c:type="GIBaseInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="base_info_get_typelib"
              c:identifier="g_base_info_get_typelib">
      <doc xml:whitespace="preserve">Obtain the typelib this @info belongs to</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the typelib.</doc>
        <type name="Typelib" c:type="GTypelib*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIBaseInfo</doc>
          <type name="IBaseInfo" c:type="GIBaseInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="base_info_is_deprecated"
              c:identifier="g_base_info_is_deprecated">
      <doc xml:whitespace="preserve">Obtain whether the @info is represents a metadata which is
deprecated or not.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if deprecated</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIBaseInfo</doc>
          <type name="IBaseInfo" c:type="GIBaseInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="base_info_iterate_attributes"
              c:identifier="g_base_info_iterate_attributes">
      <doc xml:whitespace="preserve">Iterate over all attributes associated with this node.  The iterator
structure is typically stack allocated, and must have its first
member initialized to %NULL.
Both the @name and @value should be treated as constants
and must not be freed.
&lt;example&gt;
&lt;title&gt;Iterating over attributes&lt;/title&gt;
&lt;programlisting&gt;
void
print_attributes (GIBaseInfo *info)
{
GIAttributeIter iter = { 0, };
char *name;
char *value;
while (g_base_info_iterate_attributes (info, &amp;iter, &amp;name, &amp;value))
{
}
}
&lt;/programlisting&gt;
&lt;/example&gt;</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if there are more attributes</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIBaseInfo</doc>
          <type name="IBaseInfo" c:type="GIBaseInfo*"/>
        </parameter>
        <parameter name="iterator" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIAttributeIter structure, must be initialized; see below</doc>
          <type name="IAttributeIter" c:type="GIAttributeIter*"/>
        </parameter>
        <parameter name="name"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="none">
          <doc xml:whitespace="preserve">Returned name, must not be freed</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
        <parameter name="value"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="none">
          <doc xml:whitespace="preserve">Returned name, must not be freed</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="base_info_ref" c:identifier="g_base_info_ref">
      <doc xml:whitespace="preserve">Increases the reference count of @info.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the same @info.</doc>
        <type name="IBaseInfo" c:type="GIBaseInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIBaseInfo</doc>
          <type name="IBaseInfo" c:type="GIBaseInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="base_info_unref" c:identifier="g_base_info_unref">
      <doc xml:whitespace="preserve">Decreases the reference count of @info. When its reference count
drops to 0, the info is freed.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIBaseInfo</doc>
          <type name="IBaseInfo" c:type="GIBaseInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="callable_info_get_arg"
              c:identifier="g_callable_info_get_arg">
      <doc xml:whitespace="preserve">Obtain information about a particular argument of this callable.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GIArgInfo. Free it with</doc>
        <type name="IArgInfo" c:type="GIArgInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GICallableInfo</doc>
          <type name="ICallableInfo" c:type="GICallableInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:whitespace="preserve">the argument index to fetch</doc>
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="callable_info_get_caller_owns"
              c:identifier="g_callable_info_get_caller_owns">
      <doc xml:whitespace="preserve">See whether the caller owns the return value of this callable.
#GITransfer contains a list of possible transfer values.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">%TRUE if the caller owns the return value, %FALSE otherwise.</doc>
        <type name="ITransfer" c:type="GITransfer"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GICallableInfo</doc>
          <type name="ICallableInfo" c:type="GICallableInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="callable_info_get_n_args"
              c:identifier="g_callable_info_get_n_args">
      <doc xml:whitespace="preserve">Obtain the number of arguments (both IN and OUT) for this callable.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">The number of arguments this callable expects.</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GICallableInfo</doc>
          <type name="ICallableInfo" c:type="GICallableInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="callable_info_get_return_attribute"
              c:identifier="g_callable_info_get_return_attribute">
      <doc xml:whitespace="preserve">Retrieve an arbitrary attribute associated with the return value.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">The value of the attribute, or %NULL if no such attribute exists</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GICallableInfo</doc>
          <type name="ICallableInfo" c:type="GICallableInfo*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:whitespace="preserve">a freeform string naming an attribute</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="callable_info_get_return_type"
              c:identifier="g_callable_info_get_return_type">
      <doc xml:whitespace="preserve">Obtain the return type of a callable item as a #GITypeInfo.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GITypeInfo. Free the struct by calling</doc>
        <type name="ITypeInfo" c:type="GITypeInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GICallableInfo</doc>
          <type name="ICallableInfo" c:type="GICallableInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="callable_info_iterate_return_attributes"
              c:identifier="g_callable_info_iterate_return_attributes">
      <doc xml:whitespace="preserve">Iterate over all attributes associated with the return value.  The
iterator structure is typically stack allocated, and must have its
first member initialized to %NULL.
Both the @name and @value should be treated as constants
and must not be freed.
See g_base_info_iterate_attributes() for an example of how to use a
similar API.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if there are more attributes</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GICallableInfo</doc>
          <type name="ICallableInfo" c:type="GICallableInfo*"/>
        </parameter>
        <parameter name="iterator" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIAttributeIter structure, must be initialized; see below</doc>
          <type name="IAttributeIter" c:type="GIAttributeIter*"/>
        </parameter>
        <parameter name="name"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="none">
          <doc xml:whitespace="preserve">Returned name, must not be freed</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
        <parameter name="value"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="none">
          <doc xml:whitespace="preserve">Returned name, must not be freed</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="callable_info_load_arg"
              c:identifier="g_callable_info_load_arg">
      <doc xml:whitespace="preserve">Obtain information about a particular argument of this callable; this
function is a variant of g_callable_info_get_arg() designed for stack
allocation.
The initialized @arg must not be referenced after @info is deallocated.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GICallableInfo</doc>
          <type name="ICallableInfo" c:type="GICallableInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:whitespace="preserve">the argument index to fetch</doc>
          <type name="int" c:type="gint"/>
        </parameter>
        <parameter name="arg"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:whitespace="preserve">Initialize with argument number @n</doc>
          <type name="IArgInfo" c:type="GIArgInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="callable_info_load_return_type"
              c:identifier="g_callable_info_load_return_type">
      <doc xml:whitespace="preserve">Obtain information about a return value of callable; this
function is a variant of g_callable_info_get_return_type() designed for stack
allocation.
The initialized @type must not be referenced after @info is deallocated.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GICallableInfo</doc>
          <type name="ICallableInfo" c:type="GICallableInfo*"/>
        </parameter>
        <parameter name="type"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:whitespace="preserve">Initialized with return type of @info</doc>
          <type name="ITypeInfo" c:type="GITypeInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="callable_info_may_return_null"
              c:identifier="g_callable_info_may_return_null">
      <doc xml:whitespace="preserve">See if a callable could return %NULL.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if callable could return %NULL</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GICallableInfo</doc>
          <type name="ICallableInfo" c:type="GICallableInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="constant_info_get_type"
              c:identifier="g_constant_info_get_type">
      <doc xml:whitespace="preserve">Obtain the type of the constant as a #GITypeInfo.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GITypeInfo. Free the struct by calling</doc>
        <type name="ITypeInfo" c:type="GITypeInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIConstantInfo</doc>
          <type name="IConstantInfo" c:type="GIConstantInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="constant_info_get_value"
              c:identifier="g_constant_info_get_value">
      <doc xml:whitespace="preserve">Obtain the value associated with the #GIConstantInfo and store it in the
The size of the constant value stored in @argument will be returned.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">size of the constant</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIConstantInfo</doc>
          <type name="IConstantInfo" c:type="GIConstantInfo*"/>
        </parameter>
        <parameter name="value"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:whitespace="preserve">an argument</doc>
          <type name="Argument" c:type="GArgument*"/>
        </parameter>
      </parameters>
    </function>
    <function name="enum_info_get_n_values"
              c:identifier="g_enum_info_get_n_values">
      <return-value transfer-ownership="none">
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="IEnumInfo" c:type="GIEnumInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="enum_info_get_storage_type"
              c:identifier="g_enum_info_get_storage_type">
      <doc xml:whitespace="preserve">Obtain the tag of the type used for the enum in the C ABI. This will
will be a signed or unsigned integral type.
Note that in the current implementation the width of the type is
computed correctly, but the signed or unsigned nature of the type
may not match the sign of the type used by the C compiler.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the storage type for the enumeration</doc>
        <type name="ITypeTag" c:type="GITypeTag"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIEnumInfo</doc>
          <type name="IEnumInfo" c:type="GIEnumInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="enum_info_get_value" c:identifier="g_enum_info_get_value">
      <doc xml:whitespace="preserve">Obtain a value for this enumeration.
free the struct with g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the enumeration value or %NULL if type tag is wrong,</doc>
        <type name="IValueInfo" c:type="GIValueInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIEnumInfo</doc>
          <type name="IEnumInfo" c:type="GIEnumInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:whitespace="preserve">index of value to fetch</doc>
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_domain_info_get_codes"
              c:identifier="g_error_domain_info_get_codes">
      <doc xml:whitespace="preserve">Obtain the enum containing all the error codes for this error domain.
The return value will have a #GIInfoType of %GI_INFO_TYPE_ERROR_DOMAIN
free the struct with g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the error domain or %NULL if type tag is wrong,</doc>
        <type name="IInterfaceInfo" c:type="GIInterfaceInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIErrorDomainInfo</doc>
          <type name="IErrorDomainInfo" c:type="GIErrorDomainInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_domain_info_get_quark"
              c:identifier="g_error_domain_info_get_quark">
      <doc xml:whitespace="preserve">Obtain a string representing the quark for this error domain.
%NULL will be returned if the type tag is wrong or if a quark is
missing in the typelib.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the quark represented as a string or %NULL</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIErrorDomainInfo</doc>
          <type name="IErrorDomainInfo" c:type="GIErrorDomainInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="field_info_get_field"
              c:identifier="g_field_info_get_field">
      <doc xml:whitespace="preserve">Reads a field identified by a #GFieldInfo from a C structure or
union.  This only handles fields of simple C types. It will fail
for a field of a composite type like a nested structure or union
even if that is actually readable.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if reading the field succeeded, otherwise %FALSE</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="field_info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIFieldInfo</doc>
          <type name="IFieldInfo" c:type="GIFieldInfo*"/>
        </parameter>
        <parameter name="mem" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to a block of memory representing a C structure or union</doc>
          <type name="any" c:type="gpointer"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GArgument into which to store the value retrieved</doc>
          <type name="Argument" c:type="GArgument*"/>
        </parameter>
      </parameters>
    </function>
    <function name="field_info_get_flags"
              c:identifier="g_field_info_get_flags">
      <doc xml:whitespace="preserve">Obtain the flags for this #GIFieldInfo. See #GIFieldInfoFlags for possible
flag values.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the flags</doc>
        <type name="IFieldInfoFlags" c:type="GIFieldInfoFlags"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIFieldInfo</doc>
          <type name="IFieldInfo" c:type="GIFieldInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="field_info_get_offset"
              c:identifier="g_field_info_get_offset">
      <doc xml:whitespace="preserve">Obtain the offset in bits of the field member, this is relative
to the beginning of the struct or union.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the field offset</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIFieldInfo</doc>
          <type name="IFieldInfo" c:type="GIFieldInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="field_info_get_size" c:identifier="g_field_info_get_size">
      <doc xml:whitespace="preserve">Obtain the size in bits of the field member, this is how
much space you need to allocate to store the field.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the field size</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIFieldInfo</doc>
          <type name="IFieldInfo" c:type="GIFieldInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="field_info_get_type" c:identifier="g_field_info_get_type">
      <doc xml:whitespace="preserve">Obtain the type of a field as a #GITypeInfo.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GITypeInfo. Free the struct by calling</doc>
        <type name="ITypeInfo" c:type="GITypeInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIFieldInfo</doc>
          <type name="IFieldInfo" c:type="GIFieldInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="field_info_set_field"
              c:identifier="g_field_info_set_field">
      <doc xml:whitespace="preserve">Writes a field identified by a #GFieldInfo to a C structure or
union.  This only handles fields of simple C types. It will fail
for a field of a composite type like a nested structure or union
even if that is actually writable. Note also that that it will refuse
to write fields where memory management would by required. A field
with a type such as 'char *' must be set with a setter function.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if writing the field succeeded, otherwise %FALSE</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="field_info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIFieldInfo</doc>
          <type name="IFieldInfo" c:type="GIFieldInfo*"/>
        </parameter>
        <parameter name="mem" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to a block of memory representing a C structure or union</doc>
          <type name="any" c:type="gpointer"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GArgument holding the value to store</doc>
          <type name="Argument" c:type="GArgument*"/>
        </parameter>
      </parameters>
    </function>
    <function name="function_info_get_flags"
              c:identifier="g_function_info_get_flags">
      <doc xml:whitespace="preserve">Obtain the #GIFunctionInfoFlags for the @info.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the flags</doc>
        <type name="IFunctionInfoFlags" c:type="GIFunctionInfoFlags"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIFunctionInfo</doc>
          <type name="IFunctionInfo" c:type="GIFunctionInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="function_info_get_property"
              c:identifier="g_function_info_get_property">
      <doc xml:whitespace="preserve">Obtain the property associated with this #GIFunctionInfo.
Only #GIFunctionInfo with the flag %GI_FUNCTION_IS_GETTER or
%GI_FUNCTION_IS_SETTER have a property set. For other cases,
%NULL will be returned.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the property or %NULL if not set. Free it with</doc>
        <type name="IPropertyInfo" c:type="GIPropertyInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIFunctionInfo</doc>
          <type name="IFunctionInfo" c:type="GIFunctionInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="function_info_get_symbol"
              c:identifier="g_function_info_get_symbol">
      <doc xml:whitespace="preserve">Obtain the symbol of the function. The symbol is the name of the
exported function, suitable to be used as an argument to
g_module_symbol().</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the symbol</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIFunctionInfo</doc>
          <type name="IFunctionInfo" c:type="GIFunctionInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="function_info_get_vfunc"
              c:identifier="g_function_info_get_vfunc">
      <doc xml:whitespace="preserve">Obtain the virtual function associated with this #GIFunctionInfo.
Only #GIFunctionInfo with the flag %GI_FUNCTION_WRAPS_VFUNC has
a virtual function set. For other cases, %NULL will be returned.
Free it by calling g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the virtual function or %NULL if not set.</doc>
        <type name="IVFuncInfo" c:type="GIVFuncInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIFunctionInfo</doc>
          <type name="IFunctionInfo" c:type="GIFunctionInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="function_info_invoke"
              c:identifier="g_function_info_invoke"
              throws="1">
      <doc xml:whitespace="preserve">Invokes the function described in @info with the given
arguments. Note that inout parameters must appear in both
argument lists. This function uses dlsym() to obtain a pointer
to the function, so the library or shared object containing the
described function must either be linked to the caller, or must
have been g_module_symbol()&lt;!-- --&gt;ed before calling this function.
error occurred.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the function has been invoked, %FALSE if an</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIFunctionInfo describing the function to invoke</doc>
          <type name="IFunctionInfo" c:type="GIFunctionInfo*"/>
        </parameter>
        <parameter name="in_args" transfer-ownership="none">
          <doc xml:whitespace="preserve">an array of #GArgument&lt;!-- --&gt;s, one for each in parameter of @info. If there are no in parameter, @in_args can be %NULL</doc>
          <type name="Argument" c:type="GArgument*"/>
        </parameter>
        <parameter name="n_in_args" transfer-ownership="none">
          <doc xml:whitespace="preserve">the length of the @in_args array</doc>
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="out_args" transfer-ownership="none">
          <doc xml:whitespace="preserve">an array of #GArgument&lt;!-- --&gt;s, one for each out parameter of @info. If there are no out parameters, @out_args may be %NULL</doc>
          <type name="Argument" c:type="GArgument*"/>
        </parameter>
        <parameter name="n_out_args" transfer-ownership="none">
          <doc xml:whitespace="preserve">the length of the @out_args array</doc>
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:whitespace="preserve">return location for the return value of the function. If the function returns void, @return_value may be %NULL</doc>
          <type name="Argument" c:type="GArgument*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gi_cclosure_marshal_generic"
              c:identifier="gi_cclosure_marshal_generic">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_gvalue" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="invocation_hint" transfer-ownership="none">
          <type name="any" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data" transfer-ownership="none">
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="info_new" c:identifier="g_info_new">
      <return-value transfer-ownership="full">
        <type name="IBaseInfo" c:type="GIBaseInfo*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <type name="IInfoType" c:type="GIInfoType"/>
        </parameter>
        <parameter name="container" transfer-ownership="none">
          <type name="IBaseInfo" c:type="GIBaseInfo*"/>
        </parameter>
        <parameter name="typelib" transfer-ownership="none">
          <type name="Typelib" c:type="GTypelib*"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <type name="uint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="info_type_to_string" c:identifier="g_info_type_to_string">
      <doc xml:whitespace="preserve">Obtain a string representation of @type</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the string</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:whitespace="preserve">the info type</doc>
          <type name="IInfoType" c:type="GIInfoType"/>
        </parameter>
      </parameters>
    </function>
    <function name="interface_info_find_method"
              c:identifier="g_interface_info_find_method">
      <doc xml:whitespace="preserve">Obtain a method of the interface type given a @name. %NULL will be
returned if there's no method available with that name.
Free the struct by calling g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GIFunctionInfo or %NULL if none found.</doc>
        <type name="IFunctionInfo" c:type="GIFunctionInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIInterfaceInfo</doc>
          <type name="IInterfaceInfo" c:type="GIInterfaceInfo*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:whitespace="preserve">name of method to obtain</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="interface_info_find_vfunc"
              c:identifier="g_interface_info_find_vfunc">
      <doc xml:whitespace="preserve">Locate a virtual function slot with name @name. See the documentation
for g_object_info_find_vfunc() for more information on virtuals.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GIVFuncInfo, or %NULL. Free it with</doc>
        <type name="IVFuncInfo" c:type="GIVFuncInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIInterfaceInfo</doc>
          <type name="IInterfaceInfo" c:type="GIInterfaceInfo*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:whitespace="preserve">The name of a virtual function to find.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="interface_info_get_constant"
              c:identifier="g_interface_info_get_constant">
      <doc xml:whitespace="preserve">Obtain an interface type constant at index @n.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GIConstantInfo. Free the struct by calling</doc>
        <type name="IConstantInfo" c:type="GIConstantInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIInterfaceInfo</doc>
          <type name="IInterfaceInfo" c:type="GIInterfaceInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:whitespace="preserve">index of constant to get</doc>
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="interface_info_get_iface_struct"
              c:identifier="g_interface_info_get_iface_struct">
      <doc xml:whitespace="preserve">Returns the layout C structure associated with this #GInterface.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GIStructInfo or %NULL. Free it with</doc>
        <type name="IStructInfo" c:type="GIStructInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIInterfaceInfo</doc>
          <type name="IInterfaceInfo" c:type="GIInterfaceInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="interface_info_get_method"
              c:identifier="g_interface_info_get_method">
      <doc xml:whitespace="preserve">Obtain an interface type method at index @n.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GIFunctionInfo. Free the struct by calling</doc>
        <type name="IFunctionInfo" c:type="GIFunctionInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIInterfaceInfo</doc>
          <type name="IInterfaceInfo" c:type="GIInterfaceInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:whitespace="preserve">index of method to get</doc>
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="interface_info_get_n_constants"
              c:identifier="g_interface_info_get_n_constants">
      <doc xml:whitespace="preserve">Obtain the number of constants that this interface type has.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">number of constants</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIInterfaceInfo</doc>
          <type name="IInterfaceInfo" c:type="GIInterfaceInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="interface_info_get_n_methods"
              c:identifier="g_interface_info_get_n_methods">
      <doc xml:whitespace="preserve">Obtain the number of methods that this interface type has.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">number of methods</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIInterfaceInfo</doc>
          <type name="IInterfaceInfo" c:type="GIInterfaceInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="interface_info_get_n_prerequisites"
              c:identifier="g_interface_info_get_n_prerequisites">
      <doc xml:whitespace="preserve">Obtain the number of prerequisites for this interface type.
A prerequisites is another interface that needs to be implemented for
interface, similar to an base class for GObjects.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">number of prerequisites</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIInterfaceInfo</doc>
          <type name="IInterfaceInfo" c:type="GIInterfaceInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="interface_info_get_n_properties"
              c:identifier="g_interface_info_get_n_properties">
      <doc xml:whitespace="preserve">Obtain the number of properties that this interface type has.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">number of properties</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIInterfaceInfo</doc>
          <type name="IInterfaceInfo" c:type="GIInterfaceInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="interface_info_get_n_signals"
              c:identifier="g_interface_info_get_n_signals">
      <doc xml:whitespace="preserve">Obtain the number of signals that this interface type has.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">number of signals</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIInterfaceInfo</doc>
          <type name="IInterfaceInfo" c:type="GIInterfaceInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="interface_info_get_n_vfuncs"
              c:identifier="g_interface_info_get_n_vfuncs">
      <doc xml:whitespace="preserve">Obtain the number of virtual functions that this interface type has.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">number of virtual functions</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIInterfaceInfo</doc>
          <type name="IInterfaceInfo" c:type="GIInterfaceInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="interface_info_get_prerequisite"
              c:identifier="g_interface_info_get_prerequisite">
      <doc xml:whitespace="preserve">Obtain an interface type prerequisites index @n.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the prerequisites as a #GIBaseInfo. Free the struct by calling</doc>
        <type name="IBaseInfo" c:type="GIBaseInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIInterfaceInfo</doc>
          <type name="IInterfaceInfo" c:type="GIInterfaceInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:whitespace="preserve">index of prerequisites to get</doc>
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="interface_info_get_property"
              c:identifier="g_interface_info_get_property">
      <doc xml:whitespace="preserve">Obtain an interface type property at index @n.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GIPropertyInfo. Free the struct by calling</doc>
        <type name="IPropertyInfo" c:type="GIPropertyInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIInterfaceInfo</doc>
          <type name="IInterfaceInfo" c:type="GIInterfaceInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:whitespace="preserve">index of property to get</doc>
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="interface_info_get_signal"
              c:identifier="g_interface_info_get_signal">
      <doc xml:whitespace="preserve">Obtain an interface type signal at index @n.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GISignalInfo. Free the struct by calling</doc>
        <type name="ISignalInfo" c:type="GISignalInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIInterfaceInfo</doc>
          <type name="IInterfaceInfo" c:type="GIInterfaceInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:whitespace="preserve">index of signal to get</doc>
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="interface_info_get_vfunc"
              c:identifier="g_interface_info_get_vfunc">
      <doc xml:whitespace="preserve">Obtain an interface type virtual function at index @n.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GIVFuncInfo. Free the struct by calling</doc>
        <type name="IVFuncInfo" c:type="GIVFuncInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIInterfaceInfo</doc>
          <type name="IInterfaceInfo" c:type="GIInterfaceInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:whitespace="preserve">index of virtual function to get</doc>
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_find_method"
              c:identifier="g_object_info_find_method">
      <doc xml:whitespace="preserve">Obtain a method of the object type given a @name. %NULL will be
returned if there's no method available with that name.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GIFunctionInfo. Free the struct by calling</doc>
        <type name="IFunctionInfo" c:type="GIFunctionInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:whitespace="preserve">name of method to obtain</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_find_vfunc"
              c:identifier="g_object_info_find_vfunc">
      <doc xml:whitespace="preserve">Locate a virtual function slot with name @name. Note that the namespace
for virtuals is distinct from that of methods; there may or may not be
a concrete method associated for a virtual. If there is one, it may
be retrieved using g_vfunc_info_get_invoker(), otherwise %NULL will be
returned.
See the documentation for g_vfunc_info_get_invoker() for more
information on invoking virtuals.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GIVFuncInfo, or %NULL. Free it with</doc>
        <type name="IVFuncInfo" c:type="GIVFuncInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:whitespace="preserve">The name of a virtual function to find.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_abstract"
              c:identifier="g_object_info_get_abstract">
      <doc xml:whitespace="preserve">Obtain if the object type is an abstract type, eg if it cannot be
instantiated</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the object type is abstract</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_class_struct"
              c:identifier="g_object_info_get_class_struct">
      <doc xml:whitespace="preserve">Every #GObject has two structures; an instance structure and a class
structure.  This function returns the metadata for the class structure.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GIStructInfo or %NULL. Free with</doc>
        <type name="IStructInfo" c:type="GIStructInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_constant"
              c:identifier="g_object_info_get_constant">
      <doc xml:whitespace="preserve">Obtain an object type constant at index @n.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GIConstantInfo. Free the struct by calling</doc>
        <type name="IConstantInfo" c:type="GIConstantInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:whitespace="preserve">index of constant to get</doc>
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_field"
              c:identifier="g_object_info_get_field">
      <doc xml:whitespace="preserve">Obtain an object type field at index @n.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GIFieldInfo. Free the struct by calling</doc>
        <type name="IFieldInfo" c:type="GIFieldInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:whitespace="preserve">index of field to get</doc>
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_fundamental"
              c:identifier="g_object_info_get_fundamental">
      <doc xml:whitespace="preserve">Obtain if the object type is of a fundamental type which is not
G_TYPE_OBJECT. This is mostly for supporting GstMiniObject.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the object type is a fundamental type</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_get_value_function"
              c:identifier="g_object_info_get_get_value_function">
      <doc xml:whitespace="preserve">Obtain the symbol name of the function that should be called to convert
an object instance pointer of this object type to a GValue.
I's mainly used fundamental types. The type signature for the symbol
is %GIObjectInfoGetValueFunction, to fetch the function pointer
see g_object_info_get_get_value_function().</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the symbol or %NULL</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_get_value_function_pointer"
              c:identifier="g_object_info_get_get_value_function_pointer">
      <doc xml:whitespace="preserve">Obtain a pointer to a function which can be used to
extract an instance of this object type out of a GValue.
This takes derivation into account and will reversely traverse
the base classes of this type, starting at the top type.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the function pointer or %NULL</doc>
        <type name="IObjectInfoGetValueFunction"
              c:type="GIObjectInfoGetValueFunction"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_interface"
              c:identifier="g_object_info_get_interface">
      <doc xml:whitespace="preserve">Obtain an object type interface at index @n.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GIInterfaceInfo. Free the struct by calling</doc>
        <type name="IInterfaceInfo" c:type="GIInterfaceInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:whitespace="preserve">index of interface to get</doc>
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_method"
              c:identifier="g_object_info_get_method">
      <doc xml:whitespace="preserve">Obtain an object type method at index @n.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GIFunctionInfo. Free the struct by calling</doc>
        <type name="IFunctionInfo" c:type="GIFunctionInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:whitespace="preserve">index of method to get</doc>
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_n_constants"
              c:identifier="g_object_info_get_n_constants">
      <doc xml:whitespace="preserve">Obtain the number of constants that this object type has.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">number of constants</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_n_fields"
              c:identifier="g_object_info_get_n_fields">
      <doc xml:whitespace="preserve">Obtain the number of fields that this object type has.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">number of fields</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_n_interfaces"
              c:identifier="g_object_info_get_n_interfaces">
      <doc xml:whitespace="preserve">Obtain the number of interfaces that this object type has.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">number of interfaces</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_n_methods"
              c:identifier="g_object_info_get_n_methods">
      <doc xml:whitespace="preserve">Obtain the number of methods that this object type has.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">number of methods</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_n_properties"
              c:identifier="g_object_info_get_n_properties">
      <doc xml:whitespace="preserve">Obtain the number of properties that this object type has.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">number of properties</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_n_signals"
              c:identifier="g_object_info_get_n_signals">
      <doc xml:whitespace="preserve">Obtain the number of signals that this object type has.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">number of signals</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_n_vfuncs"
              c:identifier="g_object_info_get_n_vfuncs">
      <doc xml:whitespace="preserve">Obtain the number of virtual functions that this object type has.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">number of virtual functions</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_parent"
              c:identifier="g_object_info_get_parent">
      <doc xml:whitespace="preserve">Obtain the parent of the object type.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GIObjectInfo. Free the struct by calling</doc>
        <type name="IObjectInfo" c:type="GIObjectInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_property"
              c:identifier="g_object_info_get_property">
      <doc xml:whitespace="preserve">Obtain an object type property at index @n.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GIPropertyInfo. Free the struct by calling</doc>
        <type name="IPropertyInfo" c:type="GIPropertyInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:whitespace="preserve">index of property to get</doc>
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_ref_function"
              c:identifier="g_object_info_get_ref_function">
      <doc xml:whitespace="preserve">Obtain the symbol name of the function that should be called to ref this
object type. It's mainly used fundamental types. The type signature for
the symbol is %GIObjectInfoRefFunction, to fetch the function pointer
see g_object_info_get_ref_function().</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the symbol or %NULL</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_ref_function_pointer"
              c:identifier="g_object_info_get_ref_function_pointer">
      <doc xml:whitespace="preserve">Obtain a pointer to a function which can be used to
increase the reference count an instance of this object type.
This takes derivation into account and will reversely traverse
the base classes of this type, starting at the top type.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the function pointer or %NULL</doc>
        <type name="IObjectInfoRefFunction" c:type="GIObjectInfoRefFunction"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_set_value_function"
              c:identifier="g_object_info_get_set_value_function">
      <doc xml:whitespace="preserve">Obtain the symbol name of the function that should be called to convert
set a GValue giving an object instance pointer of this object type.
I's mainly used fundamental types. The type signature for the symbol
is %GIObjectInfoSetValueFunction, to fetch the function pointer
see g_object_info_get_set_value_function().</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the symbol or %NULL</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_set_value_function_pointer"
              c:identifier="g_object_info_get_set_value_function_pointer">
      <doc xml:whitespace="preserve">Obtain a pointer to a function which can be used to
set a GValue given an instance of this object type.
This takes derivation into account and will reversely traverse
the base classes of this type, starting at the top type.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the function pointer or %NULL</doc>
        <type name="IObjectInfoSetValueFunction"
              c:type="GIObjectInfoSetValueFunction"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_signal"
              c:identifier="g_object_info_get_signal">
      <doc xml:whitespace="preserve">Obtain an object type signal at index @n.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GISignalInfo. Free the struct by calling</doc>
        <type name="ISignalInfo" c:type="GISignalInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:whitespace="preserve">index of signal to get</doc>
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_type_init"
              c:identifier="g_object_info_get_type_init">
      <doc xml:whitespace="preserve">Obtain the function which when called will return the GType
function for which this object type is registered.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the type init function</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_type_name"
              c:identifier="g_object_info_get_type_name">
      <doc xml:whitespace="preserve">Obtain the name of the objects class/type.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">name of the objects type</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_unref_function"
              c:identifier="g_object_info_get_unref_function">
      <doc xml:whitespace="preserve">Obtain the symbol name of the function that should be called to unref this
object type. It's mainly used fundamental types. The type signature for
the symbol is %GIObjectInfoUnrefFunction, to fetch the function pointer
see g_object_info_get_unref_function().</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the symbol or %NULL</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_unref_function_pointer"
              c:identifier="g_object_info_get_unref_function_pointer">
      <doc xml:whitespace="preserve">Obtain a pointer to a function which can be used to
decrease the reference count an instance of this object type.
This takes derivation into account and will reversely traverse
the base classes of this type, starting at the top type.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the function pointer or %NULL</doc>
        <type name="IObjectInfoUnrefFunction"
              c:type="GIObjectInfoUnrefFunction"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_info_get_vfunc"
              c:identifier="g_object_info_get_vfunc">
      <doc xml:whitespace="preserve">Obtain an object type virtual function at index @n.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GIVFuncInfo. Free the struct by calling</doc>
        <type name="IVFuncInfo" c:type="GIVFuncInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIObjectInfo</doc>
          <type name="IObjectInfo" c:type="GIObjectInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:whitespace="preserve">index of virtual function to get</doc>
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="property_info_get_flags"
              c:identifier="g_property_info_get_flags">
      <doc xml:whitespace="preserve">Obtain the flags for this property info. See #GParamFags for
more information about possible flag values.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the flags</doc>
        <type name="GObject.ParamFlags" c:type="GParamFlags"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIPropertyInfo</doc>
          <type name="IPropertyInfo" c:type="GIPropertyInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="property_info_get_ownership_transfer"
              c:identifier="g_property_info_get_ownership_transfer">
      <doc xml:whitespace="preserve">Obtain the ownership transfer for this property. See #GITransfer for more
information about transfer values.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the transfer</doc>
        <type name="ITransfer" c:type="GITransfer"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIPropertyInfo</doc>
          <type name="IPropertyInfo" c:type="GIPropertyInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="property_info_get_type"
              c:identifier="g_property_info_get_type">
      <doc xml:whitespace="preserve">Obtain the type information for the property @info.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GITypeInfo, free it with</doc>
        <type name="ITypeInfo" c:type="GITypeInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIPropertyInfo</doc>
          <type name="IPropertyInfo" c:type="GIPropertyInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="registered_type_info_get_g_type"
              c:identifier="g_registered_type_info_get_g_type">
      <doc xml:whitespace="preserve">Obtain the #GType for this registered type.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the #GType.</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIRegisteredTypeInfo</doc>
          <type name="IRegisteredTypeInfo" c:type="GIRegisteredTypeInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="registered_type_info_get_type_init"
              c:identifier="g_registered_type_info_get_type_init">
      <doc xml:whitespace="preserve">Obtain the type init function for @info. The type init function is the
function which will register the GType within the GObject type system.
Usually this is not called by langauge bindings or applications, use
g_registered_type_info_get_g_type() directly instead.
passing into g_module_symbol().</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the symbol name of the type init function, suitable for</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIRegisteredTypeInfo</doc>
          <type name="IRegisteredTypeInfo" c:type="GIRegisteredTypeInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="registered_type_info_get_type_name"
              c:identifier="g_registered_type_info_get_type_name">
      <doc xml:whitespace="preserve">Obtain the type name of the struct within the GObject type system.
This type can be passed to g_type_name() to get a #GType.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the type name</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIRegisteredTypeInfo</doc>
          <type name="IRegisteredTypeInfo" c:type="GIRegisteredTypeInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_info_get_class_closure"
              c:identifier="g_signal_info_get_class_closure">
      <doc xml:whitespace="preserve">Obtain the class closure for this signal if one is set. The class
closure is a virtual function on the type that the signal belongs to.
If the signal lacks a closure %NULL will be returned.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the class closure or %NULL</doc>
        <type name="IVFuncInfo" c:type="GIVFuncInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GISignalInfo</doc>
          <type name="ISignalInfo" c:type="GISignalInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_info_get_flags"
              c:identifier="g_signal_info_get_flags">
      <doc xml:whitespace="preserve">Obtain the flags for this signal info. See #GSignalFlags for
more information about possible flag values.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the flags</doc>
        <type name="GObject.SignalFlags" c:type="GSignalFlags"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GISignalInfo</doc>
          <type name="ISignalInfo" c:type="GISignalInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_info_true_stops_emit"
              c:identifier="g_signal_info_true_stops_emit">
      <doc xml:whitespace="preserve">Obtain if the returning true in the signal handler will
stop the emission of the signal.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if returning true stops the signal emission</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GISignalInfo</doc>
          <type name="ISignalInfo" c:type="GISignalInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="struct_info_find_method"
              c:identifier="g_struct_info_find_method">
      <return-value transfer-ownership="full">
        <type name="IFunctionInfo" c:type="GIFunctionInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="IStructInfo" c:type="GIStructInfo*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="struct_info_get_alignment"
              c:identifier="g_struct_info_get_alignment">
      <return-value transfer-ownership="none">
        <type name="gsize" c:type="gsize"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="IStructInfo" c:type="GIStructInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="struct_info_get_field"
              c:identifier="g_struct_info_get_field">
      <return-value transfer-ownership="full">
        <type name="IFieldInfo" c:type="GIFieldInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="IStructInfo" c:type="GIStructInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="struct_info_get_method"
              c:identifier="g_struct_info_get_method">
      <return-value transfer-ownership="full">
        <type name="IFunctionInfo" c:type="GIFunctionInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="IStructInfo" c:type="GIStructInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="struct_info_get_n_fields"
              c:identifier="g_struct_info_get_n_fields">
      <return-value transfer-ownership="none">
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="IStructInfo" c:type="GIStructInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="struct_info_get_n_methods"
              c:identifier="g_struct_info_get_n_methods">
      <return-value transfer-ownership="none">
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="IStructInfo" c:type="GIStructInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="struct_info_get_size"
              c:identifier="g_struct_info_get_size">
      <return-value transfer-ownership="none">
        <type name="gsize" c:type="gsize"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="IStructInfo" c:type="GIStructInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="struct_info_is_foreign"
              c:identifier="g_struct_info_is_foreign">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="IStructInfo" c:type="GIStructInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="struct_info_is_gtype_struct"
              c:identifier="g_struct_info_is_gtype_struct">
      <doc xml:whitespace="preserve">Return true if this structure represents the "class structure" for some
#GObject or #GInterface.  This function is mainly useful to hide this kind of structure
from generated public APIs.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if this is a class struct, %FALSE otherwise</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIStructInfo</doc>
          <type name="IStructInfo" c:type="GIStructInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_info_get_array_fixed_size"
              c:identifier="g_type_info_get_array_fixed_size">
      <doc xml:whitespace="preserve">Obtain the fixed array size of the type. The type tag must be a
#GI_TYPE_TAG_ARRAY or -1 will returned.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the size or -1 if it's not an array</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GITypeInfo</doc>
          <type name="ITypeInfo" c:type="GITypeInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_info_get_array_length"
              c:identifier="g_type_info_get_array_length">
      <doc xml:whitespace="preserve">Obtain the array length of the type. The type tag must be a
#GI_TYPE_TAG_ARRAY or -1 will returned.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the array length, or -1 if the type is not an array</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GITypeInfo</doc>
          <type name="ITypeInfo" c:type="GITypeInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_info_get_array_type"
              c:identifier="g_type_info_get_array_type">
      <doc xml:whitespace="preserve">Obtain the array type for this type. See #GIArrayType for a list of
possible values. If the type tag of this type is not array, -1 will be
returned.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the array type or -1</doc>
        <type name="IArrayType" c:type="GIArrayType"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GITypeInfo</doc>
          <type name="ITypeInfo" c:type="GITypeInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_info_get_error_domain"
              c:identifier="g_type_info_get_error_domain">
      <doc xml:whitespace="preserve">Obtain the error domains at index @n for this type. The type tag
must be a #GI_TYPE_TAG_ERROR or -1 will be returned.
free the struct with g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the error domain or %NULL if type tag is wrong,</doc>
        <type name="IErrorDomainInfo" c:type="GIErrorDomainInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GITypeInfo</doc>
          <type name="ITypeInfo" c:type="GITypeInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:whitespace="preserve">index of error domain</doc>
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_info_get_interface"
              c:identifier="g_type_info_get_interface">
      <doc xml:whitespace="preserve">For types which have #GI_TYPE_TAG_INTERFACE such as GObjects and boxed values,
this function returns full information about the referenced type.  You can then
inspect the type of the returned #GIBaseInfo to further query whether it is
a concrete GObject, a GInterface, a structure, etc. using g_base_info_get_type().
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GIBaseInfo, or %NULL. Free it with</doc>
        <type name="IBaseInfo" c:type="GIBaseInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GITypeInfo</doc>
          <type name="ITypeInfo" c:type="GITypeInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_info_get_n_error_domains"
              c:identifier="g_type_info_get_n_error_domains">
      <doc xml:whitespace="preserve">Obtain the number of error domains for this type. The type tag
must be a #GI_TYPE_TAG_ERROR or -1 will be returned.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">number of error domains or -1</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GITypeInfo</doc>
          <type name="ITypeInfo" c:type="GITypeInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_info_get_param_type"
              c:identifier="g_type_info_get_param_type">
      <doc xml:whitespace="preserve">Obtain the parameter type @n.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the param type info</doc>
        <type name="ITypeInfo" c:type="GITypeInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GITypeInfo</doc>
          <type name="ITypeInfo" c:type="GITypeInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:whitespace="preserve">index of the parameter</doc>
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_info_get_tag" c:identifier="g_type_info_get_tag">
      <doc xml:whitespace="preserve">Obtain the type tag for the type. See #GITypeTag for a list
of type tags.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the type tag</doc>
        <type name="ITypeTag" c:type="GITypeTag"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GITypeInfo</doc>
          <type name="ITypeInfo" c:type="GITypeInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_info_is_pointer"
              c:identifier="g_type_info_is_pointer">
      <doc xml:whitespace="preserve">Obtain if the type is passed as a reference.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if it is a pointer</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GITypeInfo</doc>
          <type name="ITypeInfo" c:type="GITypeInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_info_is_zero_terminated"
              c:identifier="g_type_info_is_zero_terminated">
      <doc xml:whitespace="preserve">Obtain if the last element of the array is %NULL. The type tag must be a
#GI_TYPE_TAG_ARRAY or %FALSE will returned.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if zero terminated</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GITypeInfo</doc>
          <type name="ITypeInfo" c:type="GITypeInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_tag_to_string" c:identifier="g_type_tag_to_string">
      <doc xml:whitespace="preserve">Obtain a string representation of @type</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the string</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:whitespace="preserve">the type_tag</doc>
          <type name="ITypeTag" c:type="GITypeTag"/>
        </parameter>
      </parameters>
    </function>
    <function name="union_info_find_method"
              c:identifier="g_union_info_find_method">
      <return-value transfer-ownership="full">
        <type name="IFunctionInfo" c:type="GIFunctionInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="IUnionInfo" c:type="GIUnionInfo*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="union_info_get_alignment"
              c:identifier="g_union_info_get_alignment">
      <return-value transfer-ownership="none">
        <type name="gsize" c:type="gsize"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="IUnionInfo" c:type="GIUnionInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="union_info_get_discriminator"
              c:identifier="g_union_info_get_discriminator">
      <return-value transfer-ownership="full">
        <type name="IConstantInfo" c:type="GIConstantInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="IUnionInfo" c:type="GIUnionInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="union_info_get_discriminator_offset"
              c:identifier="g_union_info_get_discriminator_offset">
      <return-value transfer-ownership="none">
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="IUnionInfo" c:type="GIUnionInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="union_info_get_discriminator_type"
              c:identifier="g_union_info_get_discriminator_type">
      <return-value transfer-ownership="full">
        <type name="ITypeInfo" c:type="GITypeInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="IUnionInfo" c:type="GIUnionInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="union_info_get_field"
              c:identifier="g_union_info_get_field">
      <return-value transfer-ownership="full">
        <type name="IFieldInfo" c:type="GIFieldInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="IUnionInfo" c:type="GIUnionInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="union_info_get_method"
              c:identifier="g_union_info_get_method">
      <return-value transfer-ownership="full">
        <type name="IFunctionInfo" c:type="GIFunctionInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="IUnionInfo" c:type="GIUnionInfo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="union_info_get_n_fields"
              c:identifier="g_union_info_get_n_fields">
      <return-value transfer-ownership="none">
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="IUnionInfo" c:type="GIUnionInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="union_info_get_n_methods"
              c:identifier="g_union_info_get_n_methods">
      <return-value transfer-ownership="none">
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="IUnionInfo" c:type="GIUnionInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="union_info_get_size" c:identifier="g_union_info_get_size">
      <return-value transfer-ownership="none">
        <type name="gsize" c:type="gsize"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="IUnionInfo" c:type="GIUnionInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="union_info_is_discriminated"
              c:identifier="g_union_info_is_discriminated">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="IUnionInfo" c:type="GIUnionInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_info_get_value"
              c:identifier="g_value_info_get_value">
      <doc xml:whitespace="preserve">Obtain the enumeration value of the #GIValueInfo.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the enumeration value</doc>
        <type name="long" c:type="glong"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIValueInfo</doc>
          <type name="IValueInfo" c:type="GIValueInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="vfunc_info_get_flags"
              c:identifier="g_vfunc_info_get_flags">
      <doc xml:whitespace="preserve">Obtain the flags for this virtual function info. See #GIVFuncInfoFlags for
more information about possible flag values.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the flags</doc>
        <type name="IVFuncInfoFlags" c:type="GIVFuncInfoFlags"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIVFuncInfo</doc>
          <type name="IVFuncInfo" c:type="GIVFuncInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="vfunc_info_get_invoker"
              c:identifier="g_vfunc_info_get_invoker">
      <doc xml:whitespace="preserve">If this virtual function has an associated invoker method, this
method will return it.  An invoker method is a C entry point.
Not all virtuals will have invokers.
g_base_info_unref() when done.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GIVFuncInfo or %NULL. Free it with</doc>
        <type name="IFunctionInfo" c:type="GIFunctionInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIVFuncInfo</doc>
          <type name="IVFuncInfo" c:type="GIVFuncInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="vfunc_info_get_offset"
              c:identifier="g_vfunc_info_get_offset">
      <doc xml:whitespace="preserve">Obtain the offset of the function pointer in the class struct. The value
0xFFFF indicates that the struct offset is unknown.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the struct offset or 0xFFFF if it's unknown</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIVFuncInfo</doc>
          <type name="IVFuncInfo" c:type="GIVFuncInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="vfunc_info_get_signal"
              c:identifier="g_vfunc_info_get_signal">
      <doc xml:whitespace="preserve">Obtain the signal for the virtual function if one is set.
The signal comes from the object or interface to which
this virtual function belongs.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the signal or %NULL if none set</doc>
        <type name="ISignalInfo" c:type="GISignalInfo*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GIVFuncInfo</doc>
          <type name="IVFuncInfo" c:type="GIVFuncInfo*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
